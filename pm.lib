// # `pm.lib`: Physical Modeling Library

import("stdfaust.lib");

/*
TODO:
	- It'd be cool to have a version of the block diagram generator that automatically flips
	things based on the use of chains, etc.
	- 
*/

//=============================Global Variables===========================================
// TODO
//========================================================================================

// TODO doc
maxDel = 2048;

// TODO doc
speedOfSound = 340;

//================================Concversion Tools=======================================
// TODO
//========================================================================================

// TODO doc
f2l(freq) = speedOfSound/freq;

//=============================Bidirectional Utilities====================================
// TODO
//========================================================================================

//--------------feedback----------
// Syntactic sugar for `A~B`.
//
// #### Usage
//
// Example of a simple integrator:
//
// ```
// _ : feedback(+,p) : _
// ```
//
// Where:
//
// * `p`: the pole
//-------------------------------
feedback(A,B) = A~B;

// TODO doc
basicBlock = _,_,_;

//-------chain(A:B:...)----------
// Creates a chain of bidirectional blocks. 
// Blocks must have 3 inputs and outputs. The first input/output correspond to the left 
// going signal, the second input/output correspond to the right going signal and the 
// third input/output is the mix of the main signal output. The implied one sample delay
// created by the `~` operator is generalized to the left and right going waves. Thus, n
// blocks in `chain()` will add an n samples delay to both the left and right going waves.
//
// #### Usage
//
// ```
// rightGoingWaves,leftGoingWaves,mixedOutput : chain(A:B) : rightGoingWaves,leftGoingWaves,mixedOutput
// with{
// 		A = _,_,_;
//		B = _,_,_;
// };
// ```
//-----------------------------
chain(A:As) = ((ro.crossnn(1),_',_ : _,A : ro.crossnn(1),_,_ : _,chain(As) : ro.crossnn(1),_,_)) ~ _ : !,_,_,_;
chain(A) = A;

//-------inputLeftW--------------
// Adds a `x` to left going waves anywhere in a chain of blocks (see `chain()`).
//
// #### Usage
//
// ```
// string(x) = chain(A:inputLeftW(x):B)
// ```
//
// Where
//
// * `x`: the input signal to be added to the chain. 
//--------------------------------
inLeftWave(x) = +(x),_,_;

//-------inputRightW--------------
// Adds a `x` to right going waves anywhere in a chain of blocks (see `chain()`).
//
// #### Usage
//
// ```
// string(x) = chain(A:inputRightW(x):B)
// ```
//
// Where
//
// * `x`: the input signal to be added to the chain. 
//--------------------------------
inRightWave(x) = _,+(x),_;

//-------input--------------
// Adds a `x` to left and right going waves anywhere in a chain of blocks (see `chain()`).
//
// #### Usage
//
// ```
// string(x) = chain(A:input(x):B)
// ```
//
// Where
//
// *`x`: the input signal to be added to the chain. 
//--------------------------------
in(x) = +(x),+(x),_;

// TODO doc
outLeftWave(x,y,s) = x,y,x+s;

// TODO doc
outRightWave(x,y,s) = x,y,y+s;

//-------output()--------------
// Adds a waveguide output anywhere between 2 blocks in a chain of blocks and sends it 
// to the mix output channel (see `chain()`).
// ### Usage
// ```
// chain(A:output:B)
// ```
//-----------------------------
out(x,y,s) = x,y,x+y+s;

//-------terminations(a,b,c)--------------
// Creates terminations on both sides of a `chain()` without closing the inputs and 
// outputs of the bidirectional signals chain. As for `chain()`, this function adds a 1
// sample delay to the bidirectional signal both ways.
//
// ### Usage
//
// ```
// rightGoingWaves,leftGoingWaves,mixedOutput : terminations(a,b,c) : rightGoingWaves,leftGoingWaves,mixedOutput
// with{
//		a = *(-1); // left termination
//		b = chain(D:E:F); // bidirectional chain of blocks (D, E, F, etc.)
//		c = *(-1); // right termination
// };
// ```  
//----------------------------------------
terminations(a,b,c) = (_,ro.crossnn(1),_,_ : +,+,_ : b) ~ (a,c : ro.crossnn(1)); // adds 2 samples to the loop!

//-------leftTermination(a,b)----------
// Creates a termination on the left side of a `chain()` without closing the inputs and 
// outputs of the bidirectional signals chain. This function adds a 1 sample delay near
// the termination.
//
// ### Usage
//
// ```
// rightGoingWaves,leftGoingWaves,mixedOutput : terminations(a,b) : rightGoingWaves,leftGoingWaves,mixedOutput
// with{
//		a = *(-1); // left termination
//		b = chain(D:E:F); // bidirectional chain of blocks (D, E, F, etc.)
// };
// ```  
//----------------------------------------
lTermination(a,b) = (ro.crossnn(1),_,_ : _,+,_ : b) ~ a;

//-------rTermination(b,c)----------
// Creates a termination on the right side of a `chain()` without closing the inputs and 
// outputs of the bidirectional signals chain. This function adds a 1 sample delay near
// the termination.
//
// ### Usage
//
// ```
// rightGoingWaves,leftGoingWaves,mixedOutput : terminations(b,c) : rightGoingWaves,leftGoingWaves,mixedOutput
// with{
//		b = chain(D:E:F); // bidirectional chain of blocks (D, E, F, etc.)
//		c = *(-1); // right termination
// };
// ```  
// ### Requires
// `filter.lib` (`crossnn`)
//----------------------------------------
rTermination(b,c) = (_,_,_,_ : +,_,_ : b) ~ (!,c);

// TODO doc
closeLeft = 0,0,0;

// TODO doc
closeRight = !,!,_;

// TODO doc
endChain(b) = closeLeft : b : closeRight;


//==================================Basic Elements========================================
// TODO
//========================================================================================

//-------waveguide(nMax,n)----------
// A simple waveguide block based on a 4th order fractional delay.
// ### Usage
// ```
// rightGoingWaves,leftGoingWaves,mixedOutput : waveguide(nMax,n) : rightGoingWaves,leftGoingWaves,mixedOutput
// ```
// With: 
// * `nMax`: the maximum length of the waveguide in samples and as a power of 2
// * `n` the length of the waveguide in samples. 
// ### Requires
// `filter.lib` (`fdelay4`)
//----------------------------------
waveguideUd(nMax,n) = par(i,2,de.delay(nMax,n)),_;
waveguideFd(nMax,n) = par(i,2,de.fdelay(nMax,n)),_;
waveguideFd2(nMax,n) = par(i,2,de.fdelay2(nMax,n)),_;
waveguideFd4(nMax,n) = par(i,2,de.fdelay4(nMax,n)),_;
waveguide(nMax,n) = waveguideFd4(nMax,n);

// TODO doc
openString(length) = waveguide(maxDel,n)
with{
	n = length*ma.SR/speedOfSound/2;
};

// TODO doc
openTube = openString;

// TODO doc
ksReflexionFilter = _ <: (_+_')/2;

//=====================================Strings============================================
// TODO
//========================================================================================

// TODO doc
ksString(length,damping,excitation) = endChain(ksChain)
with{
	lengthTuning = 0.94;
	tunedLength = length*lengthTuning;
	refCoef = (1-damping)*0.2+0.8;
	refFilter = ksReflexionFilter*refCoef;
	ksChain = terminations(_,chain(in(excitation) : openString(tunedLength) : out),refFilter);
};

//=====================================Excitations========================================
// TODO
//========================================================================================

//-------impulseExcitation(gate)--------------
// Creates an impulse excitation of one sample, from a gate button when it is triggered.
// ### Usage
// ```
// gate = button('gate');
// impulseExcitation(gate) : chain;
// ```
// With:
// * `gatè: a gate button
//--------------------------------------
impulseExcitation(trigger) = trigger : ba.impulsify;








//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// OLD SECTIONS BEYOND THIS MARK
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//-------idealString(length,reflexion,xPosition,x)----------
// An ideal string with rigid terminations and where the plucking position and the 
// pick-up position are the same. 
// ### Usage
// ```
// 1-1' : idealString(length,reflexion,xPosition,x)
// ```
// With:
// * `length`: the length of the string in meters
// * `reflexion`: the coefficient of reflexion (0-0.99999999)
// * `pluckPosition`: the plucking position (0.001-0.999)
// * `x`: the input signal for the excitation
// ### Requires
// `filter.lib` (`fdelay4`,`crossnn`)
//----------------------------------------------------------
idealString(length,reflexion,pluckPosition,x) = fullTerminations(term,wg,term)
with{
	nMax = 512; // each segment of the string can't be longer than that
	N = length*ma.SR/320-8; // length (meters) to samples
	nUp = N/2*pluckPosition : max(1); // upper string segment length
	nDown = N/2*(1-pluckPosition) : max(1); // lower string segment length
	wg = chain(waveguide(nMax,nUp) : input(x) : output : waveguide(nMax,nDown)); // waveguide chain
	term = *(-reflexion); // terminations
};

//-------dampingFilter(rho,h0,h1,x)--------------------
// TODO
//-----------------------------------------------------
dampingFilter(rho,h0,h1,x) = rho * (h0 * x' + h1*(x+x''));

//-------bridge(length,B,t60,x)-----------
// Simulate a bridge using a dampingFilter.
// ### Usage
// ```
//
// ```
// With:
// * `length`: length of the string in meters
// * `B`: the brightness of the string (0-0.99)
// * `t60̀: decaying time
// * `x`: the input signal for the excitation
// ### Requires
// `filter.lib`
//------------------------------------------------------
/*
bridge(length,B,t60,x) = dampingFilter(rho,h0,h1,x)
with{
	freq = 320/length;
	h0 = (1.0 + B)/2;
	h1 = (1.0 - B)/4;
	rho = pow(0.001,1.0/(freq*t60));
};
*/

//-------steelString-----------------------------
//-----------------------------------------------
steelString(length,pluckPosition,x) = fullTerminations(bridge,wg,bridge)
with{
	nMax = 512; // each segment of the string can't be longer than that
	N = length*SR/320-8; // length (meters) to samples
	nUp = N/2*pluckPosition : max(1); // upper string segment length
	nDown = N/2*(1-pluckPosition) : max(1); // lower string segment length
	wg = chain(waveguide(nMax,nUp) : input(x) : output : waveguide(nMax,nDown)); // waveguide chain
	bridge = bridge(length,B,t60,x)
	with{
		B = 0.8;
		t60 = 6;
	};
};

//-------nylonString-----------------------------
//-----------------------------------------------
nylonString(length,pluckPosition,B,t60,x) = fullTerminations(term,wg,term)
with{
	nMax = 512; // each segment of the string can't be longer than that
	N = length*SR/320-8; // length (meters) to samples
	nUp = N/2*pluckPosition : max(1); // upper string segment length
	nDown = N/2*(1-pluckPosition) : max(1); // lower string segment length
	wg = chain(waveguide(nMax,nUp) : input(x) : output : waveguide(nMax,nDown)); // waveguide chain
	
	term(x) = bridge(length,B,t60,x)
	with{
		B = 0.25;
		t60 = 4;
	};
};


//-------acousticExcitation(gate,P)-------------
// Creates an acoustic excitation (a noise burst) when a gate button is triggered.
// ### Usage
// ```
// gate = button('gate');
// P = SR/freq;
// acousticExcitation(gate,P) : chain;
// ```
// With:
// * `gatè: a gate button
// * `P̀ : fundamental period in samples
// ### Requires
// 'music.lib' (noise)
//--------------------------------------
acousticExcitation(gate,P) = no.noise : *(gate : trigger(P))
with {
     diffgtz(x) = (x-x') > 0;
     decay(n,x) = x-(x>0)/n;
     release(n) = + ~ decay(n);
     trigger(n) = diffgtz : release(n) : > (0.0);
};


//-----modeFilter-----
modeFilter(f,t60) = tf2(b0,b1,b2,a1,a2)
with{
	b0 = 1;
	b1 = 0;
	b2 = -1;
	w = 2*PI*f/SR;
	r = pow(0.001,1/float(t60*SR));
	a1 = -2*r*cos(w);
	a2 = r^2;
};

//---modalModel--
// modeFreqs : list of modal frequencies
// modeRes : list of t60 corresponding to the frequencies
// modeGains : list of gains corresponding to the frequencies
//--------------
modalModel(n,modeFreqs,modeRes,modeGains) = _ <: par(i,n,gain(i)*modeFilter(freqs(i),res(i))) :> _
with{
	freqs(i) = take(i+1,modeFreqs);
	res(i) = take(i+1,modeRes);
	gain(i) = take(i+1,modeGains);
};